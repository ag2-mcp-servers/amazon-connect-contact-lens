# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:25:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class CategoryName(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class CharacterOffset(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class CharacterOffsets(BaseModel):
    BeginOffsetChar: CharacterOffset
    EndOffsetChar: CharacterOffset


class ContactId(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class InstanceId(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class InternalServiceException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class IssueDetected(BaseModel):
    CharacterOffsets_1: CharacterOffsets = Field(..., alias='CharacterOffsets')


class IssuesDetected(RootModel[List[IssueDetected]]):
    root: List[IssueDetected] = Field(..., max_length=20, min_length=0)


class MatchedCategories(RootModel[List[CategoryName]]):
    root: List[CategoryName] = Field(..., max_length=150, min_length=0)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NextToken(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=131070)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=131070)


class OffsetMillis(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ParticipantId(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class ParticipantRole(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class PointOfInterest(BaseModel):
    BeginOffsetMillis: OffsetMillis
    EndOffsetMillis: OffsetMillis


class PointsOfInterest(RootModel[List[PointOfInterest]]):
    root: List[PointOfInterest] = Field(..., max_length=20, min_length=0)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SentimentValue(Enum):
    POSITIVE = 'POSITIVE'
    NEUTRAL = 'NEUTRAL'
    NEGATIVE = 'NEGATIVE'


class ThrottlingException(RootModel[Any]):
    root: Any


class TranscriptContent(RootModel[constr(pattern=r'.*\S.*', min_length=1)]):
    root: constr(pattern=r'.*\S.*', min_length=1)


class TranscriptId(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class RealtimeContactAnalysisAnalysisSegmentsPostRequest(BaseModel):
    ContactId: constr(pattern=r'.*\S.*', min_length=1, max_length=256) = Field(
        ..., description='The identifier of the contact.'
    )
    InstanceId: constr(pattern=r'.*\S.*', min_length=1, max_length=256) = Field(
        ..., description='The identifier of the Amazon Connect instance.'
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximimum number of results to return per page.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=131070)] = (
        Field(
            None,
            description='The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.',
        )
    )


class CategoryDetails(BaseModel):
    PointsOfInterest_1: PointsOfInterest = Field(..., alias='PointsOfInterest')


class ListRealtimeContactAnalysisSegmentsRequest(BaseModel):
    ContactId_1: ContactId = Field(..., alias='ContactId')
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class MatchedDetails(RootModel[Optional[Dict[str, CategoryDetails]]]):
    root: Optional[Dict[str, CategoryDetails]] = None


class Transcript(BaseModel):
    BeginOffsetMillis: OffsetMillis
    Content: TranscriptContent
    EndOffsetMillis: OffsetMillis
    Id: TranscriptId
    IssuesDetected_1: Optional[IssuesDetected] = Field(None, alias='IssuesDetected')
    ParticipantId_1: ParticipantId = Field(..., alias='ParticipantId')
    ParticipantRole_1: ParticipantRole = Field(..., alias='ParticipantRole')
    Sentiment: SentimentValue


class Categories(BaseModel):
    MatchedCategories_1: MatchedCategories = Field(..., alias='MatchedCategories')
    MatchedDetails_1: MatchedDetails = Field(..., alias='MatchedDetails')


class RealtimeContactAnalysisSegment(BaseModel):
    Categories_1: Optional[Categories] = Field(None, alias='Categories')
    Transcript_1: Optional[Transcript] = Field(None, alias='Transcript')


class RealtimeContactAnalysisSegments(RootModel[List[RealtimeContactAnalysisSegment]]):
    root: List[RealtimeContactAnalysisSegment] = Field(
        ..., max_length=100, min_length=0
    )


class ListRealtimeContactAnalysisSegmentsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Segments: RealtimeContactAnalysisSegments
